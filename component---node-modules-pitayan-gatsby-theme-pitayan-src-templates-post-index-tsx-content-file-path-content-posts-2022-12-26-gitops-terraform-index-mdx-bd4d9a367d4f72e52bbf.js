"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[3226],{2880:function(e,a,t){t.r(a),t.d(a,{default:function(){return N}});var n=t(1151),s=t(7294);function r(e){const a=Object.assign({p:"p",h2:"h2",a:"a",span:"span",em:"em",h3:"h3",ul:"ul",li:"li"},(0,n.ah)(),e.components);return s.createElement(s.Fragment,null,s.createElement(a.p,null,"GitOps as a workflow is perfect for application delivery, mostly used in Kubernetes environments, but it is also possible to use for infrastructure. In a typical GitOps scenario, you might want to look at solutions like Crossplane as a Kubernetes-native alternative, while most traditional infrastructure are still used with CI/CD pipelines. There are several benefits of creating your deployment platform with Kubernetes as the base, but it also means that more people would have to have that particular skill set. One of the benefits of an Infrastructure-as-Code tool like Terraform is that it is easy to learn, and doesn’t require much specialized knowledge."),"\n",s.createElement(a.p,null,"When building our platform services, we wanted everyone to be able to contribute. Most, if not all, of our engineers use Terraform on a daily basis, and know how to create Terraform modules that can be used in several scenarios and for several customers. While there are several ways of automating Terraform, we would like to utilize a proper GitOps workflow as much as possible."),"\n",s.createElement(a.h2,{id:"how-does-the-terraform-controller-work",style:{position:"relative"}},s.createElement(a.a,{href:"#how-does-the-terraform-controller-work","aria-label":"how does the terraform controller work permalink",className:"heading-anchor before"},s.createElement(a.span,{dangerouslySetInnerHTML:{__html:"<span>#</span>"}})),"How does the Terraform controller work"),"\n",s.createElement(a.p,null,"While searching for alternatives for running Terraform using Kubernetes, I found several controllers and operators, but none that I felt had as much potential as the ",s.createElement(a.a,{href:"https://github.com/weaveworks/tf-controller/",target:"_blank",rel:"noreferrer"},"tf-controller from Weaveworks"),". We are already using Flux as our GitOps tool, and the tf-controller works by utilizing some of the core functionality from Flux, and has a custom resource for Terraform deployments. The source controller takes care of fetching our modules, the kustomize controllers apply the Terraform resources, and then the controller spin up static pods (called runners) that runs your Terraform commands."),"\n",s.createElement(a.p,null,"The Terraform resource looks something like this:"),"\n",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yaml"><pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> infra.contrib.fluxcd.io/v1alpha1\n<span class="token key atrule">kind</span><span class="token punctuation">:</span> Terraform\n<span class="token key atrule">metadata</span><span class="token punctuation">:</span>\n  <span class="token key atrule">name</span><span class="token punctuation">:</span> helloworld\n  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> flux<span class="token punctuation">-</span>system\n<span class="token key atrule">spec</span><span class="token punctuation">:</span>\n  <span class="token key atrule">interval</span><span class="token punctuation">:</span> 1m\n  <span class="token key atrule">approvePlan</span><span class="token punctuation">:</span> auto\n  <span class="token key atrule">path</span><span class="token punctuation">:</span> ./terraform/module\n  <span class="token key atrule">sourceRef</span><span class="token punctuation">:</span>\n    <span class="token key atrule">kind</span><span class="token punctuation">:</span> GitRepository\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> helloworld\n    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> flux<span class="token punctuation">-</span>system</code></pre></div>'}}),"\n",s.createElement(a.p,null,"There are a few things to note on the specs here. The interval in the spec controls how often the controller starts up the runner pods, which then performs ",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">terraform plan</code>'}})," on your root module, which is defined by the path parameter."),"\n",s.createElement(a.p,null,"We also see that this particular resource is set to automatically approve any plans, which means that if there is a difference between the plan and the current state of the target system, a new runner will run to apply the changes automatically. This makes the process as “GitOps” as possible, but you can disable this. If you did, you would have to manually approve plans, either by using the Terraform Controller CLI, or by updating your manifests with a reference to the commit which should be applied. For more details, see the ",s.createElement(a.a,{href:"https://docs.gitops.weave.works/docs/terraform/Using%20Terraform%20CRD/provision/#manually-apply-resources",target:"_blank",rel:"noreferrer"},"documentation")," on manual approval."),"\n",s.createElement(a.p,null,"Like I mentioned earlier, the tf-controller utilizes the source controller from Flux. The ",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">sourceRef</code>'}})," attribute is used to define which source resource we want to use, just like a Flux Kustomization resource would."),"\n",s.createElement(a.h2,{id:"advanced-deployments",style:{position:"relative"}},s.createElement(a.a,{href:"#advanced-deployments","aria-label":"advanced deployments permalink",className:"heading-anchor before"},s.createElement(a.span,{dangerouslySetInnerHTML:{__html:"<span>#</span>"}})),"Advanced deployments"),"\n",s.createElement(a.p,null,"While the example above works, it’s not the type of deployment we would normally do. When not defining a backend storage the state would get stored in the cluster, which is fine for testing and development, but for production we prefer that the state file is stored somewhere outside the cluster. We don’t want this defined in the root module directly, as we want to reuse our root modules in several deployments, so we have to define our backend in our Terraform resource."),"\n",s.createElement(a.p,null,"Here is an example of how we set up a custom backend configurations. You can find all available backends in the ",s.createElement(a.a,{href:"https://developer.hashicorp.com/terraform/language/settings/backends/configuration",target:"_blank",rel:"noreferrer"},"Terraform docs"),"."),"\n",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yaml"><pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> infra.contrib.fluxcd.io/v1alpha1\n<span class="token key atrule">kind</span><span class="token punctuation">:</span> Terraform\n<span class="token key atrule">metadata</span><span class="token punctuation">:</span>\n  <span class="token key atrule">name</span><span class="token punctuation">:</span> helloworld\n  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> flux<span class="token punctuation">-</span>system\n<span class="token key atrule">spec</span><span class="token punctuation">:</span>\n  <span class="token key atrule">backendConfig</span><span class="token punctuation">:</span>\n\t<span class="token key atrule">customConfiguration</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">\n\t\tbackend "azurerm" {\n\t\t  resource_group_name  = "rg-terraform-mgmt"\n\t\t  storage_account_name = "stgextfstate"\n\t\t  container_name       = "tfstate"\n\t\t  key                  = "helloworld.tfstate"\n\t\t}</span>\n  <span class="token punctuation">...</span></code></pre></div>'}}),"\n",s.createElement(a.p,null,"For us, storing the state file outside the cluster means that we can redeploy our cluster but have no storage dependency. There is no need for backup, or state migration. As soon as the new cluster is up, it runs the commands against the same state, and we are back in business."),"\n",s.createElement(a.p,null,"Another advanced move is dependencies between modules. Sometimes we design deployments like a two-stage rocket, where one deployment sets up certain resources that the next one use. In these scenarios, we need to make sure that our Terraform is written in such a fashion so that we output any data needed as inputs for the second module, and ensure that the first module has a successful run first."),"\n",s.createElement(a.p,null,"These two examples are from code used while demonstrating dependencies, and all code can be found on my ",s.createElement(a.a,{href:"https://github.com/roberthstrand/gitops-terraform/tree/main",target:"_blank",rel:"noreferrer"},"GitHub"),". Some of the resource is omitted for brevity’s sake."),"\n",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yaml"><pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> infra.contrib.fluxcd.io/v1alpha1\n<span class="token key atrule">kind</span><span class="token punctuation">:</span> Terraform\n<span class="token key atrule">metadata</span><span class="token punctuation">:</span>\n  <span class="token key atrule">name</span><span class="token punctuation">:</span> shared<span class="token punctuation">-</span>resources\n  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> flux<span class="token punctuation">-</span>system\n<span class="token key atrule">spec</span><span class="token punctuation">:</span>\n  <span class="token punctuation">...</span>\n  <span class="token key atrule">writeOutputsToSecret</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> shared<span class="token punctuation">-</span>resources<span class="token punctuation">-</span>output\n  <span class="token punctuation">...</span></code></pre></div>'}}),"\n",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yaml"><pre class="language-yaml"><code class="language-yaml">\n<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> infra.contrib.fluxcd.io/v1alpha1\n<span class="token key atrule">kind</span><span class="token punctuation">:</span> Terraform\n<span class="token key atrule">metadata</span><span class="token punctuation">:</span>\n  <span class="token key atrule">name</span><span class="token punctuation">:</span> workload01\n  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> flux<span class="token punctuation">-</span>system\n<span class="token key atrule">spec</span><span class="token punctuation">:</span>\n  <span class="token punctuation">...</span>\n  <span class="token key atrule">dependsOn</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> shared<span class="token punctuation">-</span>resources\n\t<span class="token punctuation">...</span>\n  <span class="token key atrule">varsFrom</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> Secret\n      <span class="token key atrule">name</span><span class="token punctuation">:</span> shared<span class="token punctuation">-</span>resources<span class="token punctuation">-</span>output\n  <span class="token punctuation">...</span></code></pre></div>'}}),"\n",s.createElement(a.p,null,"In the deployment that I call ",s.createElement(a.em,null,"shared-resources"),", we see that I defined a secret where the outputs from the deployment should be stored. In this case, the outputs are the following:"),"\n",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="hcl"><pre class="language-hcl"><code class="language-hcl"><span class="token keyword">output<span class="token type variable"> "subnet_id" </span></span><span class="token punctuation">{</span>\n  <span class="token property">value</span> <span class="token punctuation">=</span> azurerm_virtual_network.base.subnet.*.id<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">output<span class="token type variable"> "resource_group_name" </span></span><span class="token punctuation">{</span>\n  <span class="token property">value</span> <span class="token punctuation">=</span> azurerm_resource_group.base.name\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(a.p,null,"Then, in the ",s.createElement(a.em,null,"workload01")," deployment, we first define our dependency with the ",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">dependsOn</code>'}})," attribute, which then makes sure that ",s.createElement(a.em,null,"shared-resources")," has a successful run before scheduling ",s.createElement(a.em,null,"workload01"),". The outputs from ",s.createElement(a.em,null,"shared-resources")," is then used as inputs in ",s.createElement(a.em,null,"workload01"),", which is the reason why we want it to wait."),"\n",s.createElement(a.h2,{id:"why-the-controller-pattern-and-not-pipelines-or-terraform-cloud",style:{position:"relative"}},s.createElement(a.a,{href:"#why-the-controller-pattern-and-not-pipelines-or-terraform-cloud","aria-label":"why the controller pattern and not pipelines or terraform cloud permalink",className:"heading-anchor before"},s.createElement(a.span,{dangerouslySetInnerHTML:{__html:"<span>#</span>"}})),"Why the controller pattern and not pipelines or Terraform Cloud"),"\n",s.createElement(a.p,null,"The most common approach to automating Terraform is either by using CI/CD pipelines or Terraform Cloud. Using pipelines for Terraform works fine, but usually ends up with us copying pipeline definitions over and over again. There are solutions to that, but by using the tf-controller we have a much more declarative approach to defining what we want our deployments to look like, rather than defining the steps in an imperative fashion."),"\n",s.createElement(a.p,null,"Terraform Cloud has introduced a lot of features that overlaps with using the GitOps workflow, but using the tf-controller does not exclude you from using Terraform Cloud. You could use Terraform Cloud as the backend for your deployment, only automating the runs through the tf-controller."),"\n",s.createElement(a.p,null,"The reason for us using this approach is that we already deploy applications using GitOps, and we have much more flexibility as to how we can offer these capabilities as a service. We can control our implementation through APIs, making self-service more accessible to both our operators and end-users. Details around our platform approach is such a big topic, that we will have to return to that in its own blog post."),"\n",s.createElement(a.h3,{id:"resources",style:{position:"relative"}},s.createElement(a.a,{href:"#resources","aria-label":"resources permalink",className:"heading-anchor before"},s.createElement(a.span,{dangerouslySetInnerHTML:{__html:"<span>#</span>"}})),"Resources"),"\n",s.createElement(a.ul,null,"\n",s.createElement(a.li,null,"Terraform Controller: ",s.createElement(a.a,{href:"https://github.com/weaveworks/tf-controller",target:"_blank",rel:"noreferrer"},"GitHub"),", ",s.createElement(a.a,{href:"https://docs.gitops.weave.works/docs/terraform/get-started/",target:"_blank",rel:"noreferrer"},"Documentation")),"\n",s.createElement(a.li,null,s.createElement(a.a,{href:"https://github.com/roberthstrand/gitops-terraform/tree/main",target:"_blank",rel:"noreferrer"},"Example deployments")),"\n",s.createElement(a.li,null,s.createElement(a.a,{href:"https://youtu.be/MlsbC9v8fxY",target:"_blank",rel:"noreferrer"},"YouTube"),", How to achieve (actual) GitOps with Terraform and Kubernetes - Cloud Native and Kubernetes Oslo Meetup"),"\n"))}var o=function(e){void 0===e&&(e={});const{wrapper:a}=Object.assign({},(0,n.ah)(),e.components);return a?s.createElement(a,e,s.createElement(r,e)):r(e)},l=t(4160),c=t(9352),p=t(8032),u=t(7896),i=t(5916),m=t(197),d=t(5911),h=t(8762),k=t(9586),f=t(9951),g=t(9286),y=t(2271),b=t(5437),w=t(5555),v=t(5648),E=t(7660),x=t(8188);const T=e=>{let{image:a}=e;return a?s.createElement(p.G,{className:"gatsby-resp-image-image",image:a,alt:""}):null},_=e=>{let{data:{mdx:{body:a,tableOfContents:t,frontmatter:{author:r,title:o,date:_,categories:N,hero:I,description:C,keywords:H},fields:{slug:O},timeToRead:j,relatedPosts:L}},pageContext:{tableOfContentsLevels:S,previous:M,next:Z},children:G}=e;const W=(0,s.useRef)(null),z=(0,p.c)(null==I?void 0:I.medium),{siteUrl:R}=(0,v.$W)(),{href:F}=(0,u.useLocation)(),K=r.map((e=>{let{id:a,yamlId:t,name:n,bio:s,sns:r}=e;return{id:a,yamlId:t,name:n,bio:s,socialUrls:r.filter((e=>"mailto"!=e[0]&&"url"!=e[0])).map((e=>E.$s[e[0]].url+"/"+e[1]))}}));return s.createElement(i.Z,{postDescription:C,pageImage:z.images.fallback.src,pageUrl:""+R+O,postTitle:o,pageTitle:o,keywords:H,date:_,timeToRead:j,authors:K},s.createElement(y.Z,{ref:W}),s.createElement("div",{className:"hidden md:block"},s.createElement(b.Z,{className:"fixed right-[6%] bottom-[6%] flex flex-col justify-center z-50"},s.createElement(f.Z,null))),s.createElement("div",{className:"max-w-lg md:max-w-2xl mx-auto mb-24"},s.createElement("h1",{className:"text-center"},o),s.createElement(m.Z,{className:"block mb-4 text-center",date:_,timeToRead:j}),s.createElement("div",{className:"block sm:flex flex-wrap items-center justify-center sm:justify-between"},s.createElement(g.Z,{data:r}),s.createElement(h.Z,{url:F,title:o,hashtags:N.join(","),description:C,className:"space-x-6 text-xl py-4 justify-center",twitter:!0,facebook:!0,linkedin:!0,pocket:!0,copy:!0}))),s.createElement("div",{className:"text-center mb-24"},s.createElement(T,{image:z})),s.createElement("div",{className:"lg:grid lg:grid-cols-9 lg:gaps-5"},s.createElement(h.Z,{url:F,title:o,hashtags:N.join(","),description:C,className:"hidden lg:flex text-xl mt-12 flex-col lg:col-start-1 lg:col-end-3 top-[2rem] sticky self-start max-h-full overflow-y-auto space-y-6",twitter:!0,facebook:!0,linkedin:!0,pocket:!0,copy:!0}),s.createElement("article",{className:"markdown lg:col-start-3 lg:col-end-8",ref:W},s.createElement(n.Zo,{components:{}},G)),s.createElement(w.Z,{className:"hidden lg:block lg:col-span-2 mt-12 top-[2rem] sticky self-start text-xs font-semibold ml-12 mr-auto mb-6 overflow-y-auto max-h-full",items:t.items,ref:W,levels:S})),s.createElement("div",{className:"my-8 max-w-lg md:max-w-2xl mx-auto"},s.createElement("div",{className:"block sm:flex flex-wrap items-center justify-center sm:justify-between"},s.createElement(k.Z,{className:"my-8 justify-center",categories:N}),s.createElement(h.Z,{url:F,title:o,hashtags:N.join(","),description:C,className:"space-x-6 text-xl my-8 justify-center",twitter:!0,facebook:!0,linkedin:!0,pocket:!0,copy:!0})),s.createElement("div",{className:"flex justify-around flex-wrap text-base mt-12 mb-24"},s.createElement("div",{className:"p-4 my-4 bg-gray-50 border border-solid border-gray-100 dark:bg-gray-800 dark:border-gray-800 rounded mr-auto w-full md:w-[49%]"},s.createElement(l.rU,{to:M.slug,className:"site-link my-2 block"},s.createElement("div",{className:"flex items-start space-x-2"},s.createElement(c.YG0,{className:"block h-6 w-6"}),s.createElement("span",null,M.title)))),s.createElement("div",{className:"p-4 my-4 bg-gray-50 border border-solid border-gray-100 dark:bg-gray-800 dark:border-gray-800 rounded ml-auto w-full md:w-[49%]"},s.createElement(l.rU,{to:Z.slug,className:"site-link my-2 block text-right"},s.createElement("div",{className:"flex items-start space-x-2 justify-end"},s.createElement("span",null,Z.title),s.createElement(c.nzV,{className:"block h-6 w-6"}))))),s.createElement("h5",{className:"text-center mb-12"},"Written by"),r.map((e=>{let{bio:a,name:t,initial:n,avatar:r,sns:o,yamlId:l}=e;return s.createElement(d.Z,{className:"p-8 mb-4 bg-gray-50 border border-solid border-gray-100 dark:bg-gray-800 dark:border-gray-800 rounded",key:l,bio:a,name:t,initial:n,avatar:r,sns:o,yamlId:l})}))),s.createElement("div",{className:"my-24 max-w-lg sm:max-w-full mx-auto"},s.createElement("h5",{className:"mb-12 text-center"},"Related Posts"),s.createElement(x.Z,{posts:L,className:"grid sm:grid-cols-3 row-auto auto-cols-auto gap-8"})))};function N(e){return s.createElement(_,e,s.createElement(o,e))}}}]);
//# sourceMappingURL=component---node-modules-pitayan-gatsby-theme-pitayan-src-templates-post-index-tsx-content-file-path-content-posts-2022-12-26-gitops-terraform-index-mdx-bd4d9a367d4f72e52bbf.js.map