"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[6882],{1836:function(n,a,s){s.r(a),s.d(a,{default:function(){return x}});var e=s(1151),t=s(7294);function o(n){const a=Object.assign({h1:"h1",a:"a",span:"span",p:"p",h2:"h2",ol:"ol",li:"li"},(0,e.ah)(),n.components);return t.createElement(t.Fragment,null,t.createElement(a.h1,{id:"short-tutorial-for-blazor-themeswitcher",style:{position:"relative"}},t.createElement(a.a,{href:"#short-tutorial-for-blazor-themeswitcher","aria-label":"short tutorial for blazor themeswitcher permalink",className:"heading-anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:"<span>#</span>"}})),"Short tutorial for Blazor ThemeSwitcher"),"\n",t.createElement(a.p,null,"When developing the portal, I quickly realized that I needed to have an easy way to switch between light and dark Material CSS themes, and I wanted the selected theme to persist even after the user refreshed the page. To accomplish this, I decided to create a service class in Blazor that could handle these tasks."),"\n",t.createElement(a.p,null,"The class includes methods to initialize the theme based on the user’s previous selection stored in local storage, as well as to toggle between light and dark themes and save the selection to local storage. Additionally, the class defines a custom event that can be used to notify the UI when the theme has been changed."),"\n",t.createElement(a.p,null,"I found that this approach helped me to keep the theme switching functionality organized and centralized in one place, rather than having to repeat the same logic across multiple components. Plus, the use of local storage made it easy to ensure that the user’s theme selection persisted even after they left and returned to the portal."),"\n",t.createElement(a.p,null,"Overall, I’m quite happy with how this service class turned out and I’m sure it will be useful in other Blazor projects that require theme switching functionality."),"\n",t.createElement(a.h2,{id:"add-css-and-js-to-_hostcshtml-file",style:{position:"relative"}},t.createElement(a.a,{href:"#add-css-and-js-to-_hostcshtml-file","aria-label":"add css and js to _hostcshtml file permalink",className:"heading-anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:"<span>#</span>"}})),"Add Css and js to _Host.cshtml file"),"\n",t.createElement(a.p,null,"First you need to add the following to your ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">_Host.cshtml</code>'}})," file."),"\n",t.createElement(a.ol,null,"\n",t.createElement(a.li,null,"Add this in inside ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">&lt;head></code>'}}),"."),"\n"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="html"><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>theme<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/material.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre></div>'}}),"\n",t.createElement(a.ol,{start:"2"},"\n",t.createElement(a.li,null,"and this just above the closing ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">&lt;/body></code>'}})," tag.\nThis make sure we change the whole path to selected css file. I have two files: ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.css/material.css</code>'}})," and ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.css/materialdark.css</code>'}})),"\n"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>\n        <span class="token keyword">function</span> <span class="token function">setTheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">\'body\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">\'none\'</span><span class="token punctuation">;</span>\n            <span class="token keyword">var</span> theme <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">\'ThemeInUse\'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">\'materialdark\'</span> <span class="token operator">?</span> <span class="token string">\'materialdark\'</span> <span class="token operator">:</span> <span class="token string">\'material\'</span><span class="token punctuation">;</span>\n            <span class="token keyword">let</span> synclink <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'theme\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            synclink<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">\'css/\'</span> <span class="token operator">+</span> theme <span class="token operator">+</span> <span class="token string">\'.css\'</span><span class="token punctuation">;</span>\n            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">\'body\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">\'block\'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token function">setTheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"create-a-new-class-themeservicecs-and-add-to-programcs",style:{position:"relative"}},t.createElement(a.a,{href:"#create-a-new-class-themeservicecs-and-add-to-programcs","aria-label":"create a new class themeservicecs and add to programcs permalink",className:"heading-anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:"<span>#</span>"}})),"Create a new class ThemeService.cs and add to Program.cs"),"\n",t.createElement(a.ol,null,"\n",t.createElement(a.li,null,"Add a new file names ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ThemeService.cs</code>'}})," and fill in the following code. (I got some help from ChatGPT to make comments inline)."),"\n"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c"><pre class="language-c"><code class="language-c">using Blazored<span class="token punctuation">.</span>LocalStorage<span class="token punctuation">;</span>\nusing Microsoft<span class="token punctuation">.</span>JSInterop<span class="token punctuation">;</span>\nusing Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Components<span class="token punctuation">;</span>\n\npublic class ThemeService\n<span class="token punctuation">{</span>\n    private ILocalStorageService _localStorage<span class="token punctuation">;</span>\n    private IJSRuntime _jsRuntime<span class="token punctuation">;</span>\n\n    <span class="token comment">// The name of the theme currently in use</span>\n    public string ThemeName<span class="token punctuation">;</span>\n\n    <span class="token comment">// The state of whether the dark mode is enabled or not</span>\n    public bool isDarkMode <span class="token operator">=</span> false<span class="token punctuation">;</span>\n\n    <span class="token comment">// Event that is triggered when the theme changes</span>\n    public event Action OnThemeChanged<span class="token punctuation">;</span>\n\n    public <span class="token function">ThemeService</span><span class="token punctuation">(</span>ILocalStorageService localStorage<span class="token punctuation">,</span> IJSRuntime jSRuntime<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        _localStorage <span class="token operator">=</span> localStorage<span class="token punctuation">;</span>\n        _jsRuntime <span class="token operator">=</span> jSRuntime<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// Details of the current theme</span>\n    public ThemeDetails CurrentTheme <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> new <span class="token function">ThemeDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// List of all available themes, along with their details</span>\n    public List<span class="token operator">&lt;</span>ThemeDetails<span class="token operator">></span> Themes <span class="token operator">=</span> new List<span class="token operator">&lt;</span>ThemeDetails<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        new <span class="token function">ThemeDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> ID <span class="token operator">=</span> <span class="token string">"material"</span><span class="token punctuation">,</span> Text <span class="token operator">=</span> <span class="token string">"Material"</span><span class="token punctuation">,</span> SyncfusionTheme <span class="token operator">=</span> Theme<span class="token punctuation">.</span>Material<span class="token punctuation">,</span> ThemeSelectedBackground <span class="token operator">=</span> <span class="token string">"#ffffff"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        new <span class="token function">ThemeDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> ID <span class="token operator">=</span> <span class="token string">"materialdark"</span><span class="token punctuation">,</span> Text <span class="token operator">=</span> <span class="token string">"Material Dark"</span><span class="token punctuation">,</span> SyncfusionTheme <span class="token operator">=</span> Theme<span class="token punctuation">.</span>MaterialDark<span class="token punctuation">,</span> ThemeSelectedBackground <span class="token operator">=</span> <span class="token string">"#242424"</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Details of a theme</span>\n    public class ThemeDetails\n    <span class="token punctuation">{</span>\n        <span class="token comment">// The unique identifier of the theme</span>\n        public string ID <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n        <span class="token comment">// The display name of the theme</span>\n        public string Text <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n        <span class="token comment">// The Syncfusion theme associated with the theme</span>\n        public Theme SyncfusionTheme <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n        <span class="token comment">// The background color associated with the theme</span>\n        public string ThemeSelectedBackground <span class="token punctuation">{</span> get<span class="token punctuation">;</span> set<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// Initializes the theme service and fetches the theme from the local storage, if available</span>\n    public async Task <span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        await <span class="token function">FetchThemeOrDefaultFromLocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        ThemeName <span class="token operator">=</span> CurrentTheme<span class="token punctuation">.</span>ID<span class="token punctuation">;</span>\n\n        <span class="token comment">// Set the isDarkMode flag based on the value in local storage</span>\n        isDarkMode <span class="token operator">=</span> <span class="token punctuation">(</span>await _localStorage<span class="token punctuation">.</span><span class="token function">GetItemAsStringAsync</span><span class="token punctuation">(</span>ISDARK<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"true"</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// Toggles the current theme between dark and light mode</span>\n    public async Task <span class="token function">ToggleTheme</span><span class="token punctuation">(</span>ChangeEventArgs e<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// Update the isDarkMode flag based on the new value of the checkbox</span>\n        isDarkMode <span class="token operator">=</span> <span class="token punctuation">(</span>bool<span class="token punctuation">)</span>e<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>\n\n        <span class="token comment">// Determine the ID of the theme based on whether the dark mode is enabled or not</span>\n        var themeId <span class="token operator">=</span> isDarkMode <span class="token operator">?</span> <span class="token string">"materialdark"</span> <span class="token operator">:</span> <span class="token string">"material"</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// Set the current theme based on the theme ID</span>\n        CurrentTheme <span class="token operator">=</span> Themes<span class="token punctuation">.</span><span class="token function">Single</span><span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">></span> t<span class="token punctuation">.</span>ID <span class="token operator">==</span> themeId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        ThemeName <span class="token operator">=</span> CurrentTheme<span class="token punctuation">.</span>ID<span class="token punctuation">;</span>\n\n        <span class="token comment">// Store the theme and isDarkMode flags in local storage</span>\n        <span class="token function">StoreThemeInLocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// Delay the execution for a short time to avoid any timing issues</span>\n        await Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// Trigger the OnThemeChanged event</span>\n        OnThemeChanged<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// Update the theme using JavaScript interop</span>\n        await _jsRuntime<span class="token punctuation">.</span><span class="token function">InvokeVoidAsync</span><span class="token punctuation">(</span><span class="token string">"setTheme"</span><span class="token punctuation">,</span> themeId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// Fetches the theme from the local storage, or sets the default theme if not available</span>\n    private async Task <span class="token function">FetchThemeOrDefaultFromLocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>await _localStorage<span class="token punctuation">.</span><span class="token function">ContainKeyAsync</span><span class="token punctuation">(</span>THEMEKEY<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token comment">// If the theme key exists in local storage, fetch the theme and isDarkMode flag</span>\n            var themeID <span class="token operator">=</span> await _localStorage<span class="token punctuation">.</span><span class="token function">GetItemAsStringAsync</span><span class="token punctuation">(</span>THEMEKEY<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            var isDarkModeString <span class="token operator">=</span> await _localStorage<span class="token punctuation">.</span><span class="token function">GetItemAsStringAsync</span><span class="token punctuation">(</span>ISDARK<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">// Set isDark</span></code></pre></div>'}}),"\n",t.createElement(a.ol,{start:"2"},"\n",t.createElement(a.li,null,"Now, add ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">builder.Services.AddScoped&lt;ThemeService>();</code>'}})," to ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Program.cs</code>'}})),"\n"),"\n",t.createElement(a.h2,{id:"next-well-head-over-to-mainlayoutrazor",style:{position:"relative"}},t.createElement(a.a,{href:"#next-well-head-over-to-mainlayoutrazor","aria-label":"next well head over to mainlayoutrazor permalink",className:"heading-anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:"<span>#</span>"}})),"Next, we`ll head over to MainLayout.razor"),"\n",t.createElement(a.ol,null,"\n",t.createElement(a.li,null,"First, lets ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">@inject ThemeService themeService</code>'}})," at the top."),"\n",t.createElement(a.li,null,"Add a switch/checkbox or whatever you want to use. Im using ",t.createElement(a.a,{href:"https://www.syncfusion.com/blazor-components",target:"_blank",rel:"noreferrer"},"SyncFusion")," for visuals"),"\n"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="html"><pre class="language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Light Mode<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SfSwitch</span> <span class="token attr-name">@bind-Checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>themeService.isDarkMode<span class="token punctuation">"</span></span>\n        <span class="token attr-name">@onchange</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@((args) => themeService.ToggleTheme(args))<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SfSwitch</span><span class="token punctuation">></span></span></code></pre></div>'}}),"\n",t.createElement(a.ol,{start:"3"},"\n",t.createElement(a.li,null,"Add the following code to the bottom of MainLayout.razor"),"\n"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="c"><pre class="language-c"><code class="language-c">@code <span class="token punctuation">{</span>\n    <span class="token comment">// Method that is called when the component is initialized</span>\n    protected override async Task <span class="token function">OnInitializedAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// Subscribes to the \'OnThemeChanged\' event in the \'themeService\' instance and</span>\n        <span class="token comment">// assigns the \'HandleThemeChanged\' method to handle the event</span>\n        themeService<span class="token punctuation">.</span>OnThemeChanged <span class="token operator">+=</span> HandleThemeChanged<span class="token punctuation">;</span>\n\n        <span class="token comment">// Calls the base \'OnInitializedAsync\' method</span>\n        await base<span class="token punctuation">.</span><span class="token function">OnInitializedAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// Method that is called when the theme is changed</span>\n    private async <span class="token keyword">void</span> <span class="token function">HandleThemeChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// Adds a small delay to allow the theme to change before updating the state</span>\n        await Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// Calls the \'StateHasChanged\' method to update the component\'s state</span>\n        <span class="token function">StateHasChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// Method that is called when the component is disposed</span>\n    public <span class="token keyword">void</span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// Unsubscribes from the \'OnThemeChanged\' event in the \'themeService\' instance</span>\n        themeService<span class="token punctuation">.</span>OnThemeChanged <span class="token operator">-=</span> HandleThemeChanged<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// Method that is called after the component has been rendered</span>\n    protected override async Task <span class="token function">OnAfterRenderAsync</span><span class="token punctuation">(</span>bool firstRender<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// If this is the first time the component has been rendered</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>firstRender<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token comment">// Initializes the \'themeService\' instance and waits for it to complete</span>\n            await themeService<span class="token punctuation">.</span><span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token comment">// Calls the \'StateHasChanged\' method to update the component\'s state</span>\n            <span class="token function">StateHasChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Hope it helps! Good luck!"))}var p=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,e.ah)(),n.components);return a?t.createElement(a,n,t.createElement(o,n)):o(n)},c=s(4160),l=s(9352),i=s(8032),u=s(7896),r=s(5916),m=s(197),k=s(5911),h=s(8762),d=s(9586),g=s(9951),f=s(9286),y=s(2271),b=s(5437),v=s(5555),w=s(5648),T=s(7660),E=s(8188);const S=n=>{let{image:a}=n;return a?t.createElement(i.G,{className:"gatsby-resp-image-image",image:a,alt:""}):null},I=n=>{let{data:{mdx:{body:a,tableOfContents:s,frontmatter:{author:o,title:p,date:I,categories:x,hero:_,description:M,keywords:N},fields:{slug:D},timeToRead:C,relatedPosts:L}},pageContext:{tableOfContentsLevels:H,previous:j,next:z},children:A}=n;const O=(0,t.useRef)(null),R=(0,i.c)(null==_?void 0:_.medium),{siteUrl:Z}=(0,w.$W)(),{href:B}=(0,u.useLocation)(),U=o.map((n=>{let{id:a,yamlId:s,name:e,bio:t,sns:o}=n;return{id:a,yamlId:s,name:e,bio:t,socialUrls:o.filter((n=>"mailto"!=n[0]&&"url"!=n[0])).map((n=>T.$s[n[0]].url+"/"+n[1]))}}));return t.createElement(r.Z,{postDescription:M,pageImage:R.images.fallback.src,pageUrl:""+Z+D,postTitle:p,pageTitle:p,keywords:N,date:I,timeToRead:C,authors:U},t.createElement(y.Z,{ref:O}),t.createElement("div",{className:"hidden md:block"},t.createElement(b.Z,{className:"fixed right-[6%] bottom-[6%] flex flex-col justify-center z-50"},t.createElement(g.Z,null))),t.createElement("div",{className:"max-w-lg md:max-w-2xl mx-auto mb-24"},t.createElement("h1",{className:"text-center"},p),t.createElement(m.Z,{className:"block mb-4 text-center",date:I,timeToRead:C}),t.createElement("div",{className:"block sm:flex flex-wrap items-center justify-center sm:justify-between"},t.createElement(f.Z,{data:o}),t.createElement(h.Z,{url:B,title:p,hashtags:x.join(","),description:M,className:"space-x-6 text-xl py-4 justify-center",twitter:!0,facebook:!0,linkedin:!0,pocket:!0,copy:!0}))),t.createElement("div",{className:"text-center mb-24"},t.createElement(S,{image:R})),t.createElement("div",{className:"lg:grid lg:grid-cols-9 lg:gaps-5"},t.createElement(h.Z,{url:B,title:p,hashtags:x.join(","),description:M,className:"hidden lg:flex text-xl mt-12 flex-col lg:col-start-1 lg:col-end-3 top-[2rem] sticky self-start max-h-full overflow-y-auto space-y-6",twitter:!0,facebook:!0,linkedin:!0,pocket:!0,copy:!0}),t.createElement("article",{className:"markdown lg:col-start-3 lg:col-end-8",ref:O},t.createElement(e.Zo,{components:{}},A)),t.createElement(v.Z,{className:"hidden lg:block lg:col-span-2 mt-12 top-[2rem] sticky self-start text-xs font-semibold ml-12 mr-auto mb-6 overflow-y-auto max-h-full",items:s.items,ref:O,levels:H})),t.createElement("div",{className:"my-8 max-w-lg md:max-w-2xl mx-auto"},t.createElement("div",{className:"block sm:flex flex-wrap items-center justify-center sm:justify-between"},t.createElement(d.Z,{className:"my-8 justify-center",categories:x}),t.createElement(h.Z,{url:B,title:p,hashtags:x.join(","),description:M,className:"space-x-6 text-xl my-8 justify-center",twitter:!0,facebook:!0,linkedin:!0,pocket:!0,copy:!0})),t.createElement("div",{className:"flex justify-around flex-wrap text-base mt-12 mb-24"},t.createElement("div",{className:"p-4 my-4 bg-gray-50 border border-solid border-gray-100 dark:bg-gray-800 dark:border-gray-800 rounded mr-auto w-full md:w-[49%]"},t.createElement(c.rU,{to:j.slug,className:"site-link my-2 block"},t.createElement("div",{className:"flex items-start space-x-2"},t.createElement(l.YG0,{className:"block h-6 w-6"}),t.createElement("span",null,j.title)))),t.createElement("div",{className:"p-4 my-4 bg-gray-50 border border-solid border-gray-100 dark:bg-gray-800 dark:border-gray-800 rounded ml-auto w-full md:w-[49%]"},t.createElement(c.rU,{to:z.slug,className:"site-link my-2 block text-right"},t.createElement("div",{className:"flex items-start space-x-2 justify-end"},t.createElement("span",null,z.title),t.createElement(l.nzV,{className:"block h-6 w-6"}))))),t.createElement("h5",{className:"text-center mb-12"},"Written by"),o.map((n=>{let{bio:a,name:s,initial:e,avatar:o,sns:p,yamlId:c}=n;return t.createElement(k.Z,{className:"p-8 mb-4 bg-gray-50 border border-solid border-gray-100 dark:bg-gray-800 dark:border-gray-800 rounded",key:c,bio:a,name:s,initial:e,avatar:o,sns:p,yamlId:c})}))),t.createElement("div",{className:"my-24 max-w-lg sm:max-w-full mx-auto"},t.createElement("h5",{className:"mb-12 text-center"},"Related Posts"),t.createElement(E.Z,{posts:L,className:"grid sm:grid-cols-3 row-auto auto-cols-auto gap-8"})))};function x(n){return t.createElement(I,n,t.createElement(p,n))}}}]);
//# sourceMappingURL=component---node-modules-pitayan-gatsby-theme-pitayan-src-templates-post-index-tsx-content-file-path-content-posts-2023-04-17-theme-switcher-blazor-index-mdx-7cb21a8daeba595d93fc.js.map